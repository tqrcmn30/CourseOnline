// Code generated by MockGen. DO NOT EDIT.
// Source: courseonline/services (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	db "courseonline/db/sqlc"
	models "courseonline/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCart mocks base method.
func (m *MockStore) CreateCart(arg0 context.Context, arg1 db.CreateCartParams) (*db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", arg0, arg1)
	ret0, _ := ret[0].(*db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockStoreMockRecorder) CreateCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockStore)(nil).CreateCart), arg0, arg1)
}

// CreateCartTx mocks base method.
func (m *MockStore) CreateCartTx(arg0 context.Context, arg1 db.CreateOrderCourseParams) (*db.OrderCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartTx", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCartTx indicates an expected call of CreateCartTx.
func (mr *MockStoreMockRecorder) CreateCartTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartTx", reflect.TypeOf((*MockStore)(nil).CreateCartTx), arg0, arg1)
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(arg0 context.Context, arg1 *string) (*db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(*db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), arg0, arg1)
}

// CreateCourse mocks base method.
func (m *MockStore) CreateCourse(arg0 context.Context, arg1 db.CreateCourseParams) (*db.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourse", arg0, arg1)
	ret0, _ := ret[0].(*db.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCourse indicates an expected call of CreateCourse.
func (mr *MockStoreMockRecorder) CreateCourse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourse", reflect.TypeOf((*MockStore)(nil).CreateCourse), arg0, arg1)
}

// CreateCourseImage mocks base method.
func (m *MockStore) CreateCourseImage(arg0 context.Context, arg1 db.CreateCourseImageParams) (*db.CoursesImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourseImage", arg0, arg1)
	ret0, _ := ret[0].(*db.CoursesImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCourseImage indicates an expected call of CreateCourseImage.
func (mr *MockStoreMockRecorder) CreateCourseImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourseImage", reflect.TypeOf((*MockStore)(nil).CreateCourseImage), arg0, arg1)
}

// CreateOrderCourse mocks base method.
func (m *MockStore) CreateOrderCourse(arg0 context.Context, arg1 db.CreateOrderCourseParams) (*db.OrderCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderCourse", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderCourse indicates an expected call of CreateOrderCourse.
func (mr *MockStoreMockRecorder) CreateOrderCourse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderCourse", reflect.TypeOf((*MockStore)(nil).CreateOrderCourse), arg0, arg1)
}

// CreateOrderCoursesDetail mocks base method.
func (m *MockStore) CreateOrderCoursesDetail(arg0 context.Context, arg1 db.CreateOrderCoursesDetailParams) (*db.OrderCoursesDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderCoursesDetail", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderCoursesDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderCoursesDetail indicates an expected call of CreateOrderCoursesDetail.
func (mr *MockStoreMockRecorder) CreateOrderCoursesDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderCoursesDetail", reflect.TypeOf((*MockStore)(nil).CreateOrderCoursesDetail), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteCart mocks base method.
func (m *MockStore) DeleteCart(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCart indicates an expected call of DeleteCart.
func (mr *MockStoreMockRecorder) DeleteCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCart", reflect.TypeOf((*MockStore)(nil).DeleteCart), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockStore) DeleteCategory(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStoreMockRecorder) DeleteCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStore)(nil).DeleteCategory), arg0, arg1)
}

// DeleteCourse mocks base method.
func (m *MockStore) DeleteCourse(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourse indicates an expected call of DeleteCourse.
func (mr *MockStoreMockRecorder) DeleteCourse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourse", reflect.TypeOf((*MockStore)(nil).DeleteCourse), arg0, arg1)
}

// DeleteCourseImage mocks base method.
func (m *MockStore) DeleteCourseImage(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseImage indicates an expected call of DeleteCourseImage.
func (mr *MockStoreMockRecorder) DeleteCourseImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseImage", reflect.TypeOf((*MockStore)(nil).DeleteCourseImage), arg0, arg1)
}

// DeleteOrderCourse mocks base method.
func (m *MockStore) DeleteOrderCourse(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderCourse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderCourse indicates an expected call of DeleteOrderCourse.
func (mr *MockStoreMockRecorder) DeleteOrderCourse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderCourse", reflect.TypeOf((*MockStore)(nil).DeleteOrderCourse), arg0, arg1)
}

// DeleteOrderCoursesDetail mocks base method.
func (m *MockStore) DeleteOrderCoursesDetail(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderCoursesDetail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderCoursesDetail indicates an expected call of DeleteOrderCoursesDetail.
func (mr *MockStoreMockRecorder) DeleteOrderCoursesDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderCoursesDetail", reflect.TypeOf((*MockStore)(nil).DeleteOrderCoursesDetail), arg0, arg1)
}

// DeleteToken mocks base method.
func (m *MockStore) DeleteToken(arg0 context.Context, arg1 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockStoreMockRecorder) DeleteToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockStore)(nil).DeleteToken), arg0, arg1)
}

// FindUserByPhone mocks base method.
func (m *MockStore) FindUserByPhone(arg0 context.Context, arg1 *string) (*db.FindUserByPhoneRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByPhone", arg0, arg1)
	ret0, _ := ret[0].(*db.FindUserByPhoneRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByPhone indicates an expected call of FindUserByPhone.
func (mr *MockStoreMockRecorder) FindUserByPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByPhone", reflect.TypeOf((*MockStore)(nil).FindUserByPhone), arg0, arg1)
}

// FindUserByUserPassword mocks base method.
func (m *MockStore) FindUserByUserPassword(arg0 context.Context, arg1 db.FindUserByUserPasswordParams) (*db.FindUserByUserPasswordRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUserPassword", arg0, arg1)
	ret0, _ := ret[0].(*db.FindUserByUserPasswordRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUserPassword indicates an expected call of FindUserByUserPassword.
func (mr *MockStoreMockRecorder) FindUserByUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUserPassword", reflect.TypeOf((*MockStore)(nil).FindUserByUserPassword), arg0, arg1)
}

// FindUserByUsername mocks base method.
func (m *MockStore) FindUserByUsername(arg0 context.Context, arg1 *string) (*db.FindUserByUsernameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(*db.FindUserByUsernameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockStoreMockRecorder) FindUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockStore)(nil).FindUserByUsername), arg0, arg1)
}

// GetAllCarts mocks base method.
func (m *MockStore) GetAllCarts(arg0 context.Context) ([]*db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCarts", arg0)
	ret0, _ := ret[0].([]*db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCarts indicates an expected call of GetAllCarts.
func (mr *MockStoreMockRecorder) GetAllCarts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCarts", reflect.TypeOf((*MockStore)(nil).GetAllCarts), arg0)
}

// GetAllCategories mocks base method.
func (m *MockStore) GetAllCategories(arg0 context.Context) ([]*db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", arg0)
	ret0, _ := ret[0].([]*db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockStoreMockRecorder) GetAllCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockStore)(nil).GetAllCategories), arg0)
}

// GetAllCourseImages mocks base method.
func (m *MockStore) GetAllCourseImages(arg0 context.Context) ([]*db.CoursesImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCourseImages", arg0)
	ret0, _ := ret[0].([]*db.CoursesImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCourseImages indicates an expected call of GetAllCourseImages.
func (mr *MockStoreMockRecorder) GetAllCourseImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCourseImages", reflect.TypeOf((*MockStore)(nil).GetAllCourseImages), arg0)
}

// GetAllCourses mocks base method.
func (m *MockStore) GetAllCourses(arg0 context.Context) ([]*db.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCourses", arg0)
	ret0, _ := ret[0].([]*db.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCourses indicates an expected call of GetAllCourses.
func (mr *MockStoreMockRecorder) GetAllCourses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCourses", reflect.TypeOf((*MockStore)(nil).GetAllCourses), arg0)
}

// GetAllCoursesPaging mocks base method.
func (m *MockStore) GetAllCoursesPaging(arg0 context.Context, arg1 db.GetAllCoursesPagingParams) ([]*db.GetAllCoursesPagingRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCoursesPaging", arg0, arg1)
	ret0, _ := ret[0].([]*db.GetAllCoursesPagingRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCoursesPaging indicates an expected call of GetAllCoursesPaging.
func (mr *MockStoreMockRecorder) GetAllCoursesPaging(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCoursesPaging", reflect.TypeOf((*MockStore)(nil).GetAllCoursesPaging), arg0, arg1)
}

// GetAllOrderCourses mocks base method.
func (m *MockStore) GetAllOrderCourses(arg0 context.Context) ([]*db.OrderCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderCourses", arg0)
	ret0, _ := ret[0].([]*db.OrderCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrderCourses indicates an expected call of GetAllOrderCourses.
func (mr *MockStoreMockRecorder) GetAllOrderCourses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderCourses", reflect.TypeOf((*MockStore)(nil).GetAllOrderCourses), arg0)
}

// GetAllOrderCoursesDetails mocks base method.
func (m *MockStore) GetAllOrderCoursesDetails(arg0 context.Context) ([]*db.OrderCoursesDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderCoursesDetails", arg0)
	ret0, _ := ret[0].([]*db.OrderCoursesDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrderCoursesDetails indicates an expected call of GetAllOrderCoursesDetails.
func (mr *MockStoreMockRecorder) GetAllOrderCoursesDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderCoursesDetails", reflect.TypeOf((*MockStore)(nil).GetAllOrderCoursesDetails), arg0)
}

// GetCartByID mocks base method.
func (m *MockStore) GetCartByID(arg0 context.Context, arg1 int32) (*db.GetCartByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByID", arg0, arg1)
	ret0, _ := ret[0].(*db.GetCartByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByID indicates an expected call of GetCartByID.
func (mr *MockStoreMockRecorder) GetCartByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByID", reflect.TypeOf((*MockStore)(nil).GetCartByID), arg0, arg1)
}

// GetCartByUserID mocks base method.
func (m *MockStore) GetCartByUserID(arg0 context.Context, arg1 *int32) ([]*db.GetCartByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*db.GetCartByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByUserID indicates an expected call of GetCartByUserID.
func (mr *MockStoreMockRecorder) GetCartByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByUserID", reflect.TypeOf((*MockStore)(nil).GetCartByUserID), arg0, arg1)
}

// GetCartByUserandCourse mocks base method.
func (m *MockStore) GetCartByUserandCourse(arg0 context.Context, arg1 db.GetCartByUserandCourseParams) (*db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByUserandCourse", arg0, arg1)
	ret0, _ := ret[0].(*db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByUserandCourse indicates an expected call of GetCartByUserandCourse.
func (mr *MockStoreMockRecorder) GetCartByUserandCourse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByUserandCourse", reflect.TypeOf((*MockStore)(nil).GetCartByUserandCourse), arg0, arg1)
}

// GetCategoryByID mocks base method.
func (m *MockStore) GetCategoryByID(arg0 context.Context, arg1 int32) (*db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", arg0, arg1)
	ret0, _ := ret[0].(*db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockStoreMockRecorder) GetCategoryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockStore)(nil).GetCategoryByID), arg0, arg1)
}

// GetCourseByID mocks base method.
func (m *MockStore) GetCourseByID(arg0 context.Context, arg1 int32) (*db.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseByID", arg0, arg1)
	ret0, _ := ret[0].(*db.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseByID indicates an expected call of GetCourseByID.
func (mr *MockStoreMockRecorder) GetCourseByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseByID", reflect.TypeOf((*MockStore)(nil).GetCourseByID), arg0, arg1)
}

// GetCourseImageByID mocks base method.
func (m *MockStore) GetCourseImageByID(arg0 context.Context, arg1 int32) (*db.CoursesImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseImageByID", arg0, arg1)
	ret0, _ := ret[0].(*db.CoursesImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseImageByID indicates an expected call of GetCourseImageByID.
func (mr *MockStoreMockRecorder) GetCourseImageByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseImageByID", reflect.TypeOf((*MockStore)(nil).GetCourseImageByID), arg0, arg1)
}

// GetOrderCourseByID mocks base method.
func (m *MockStore) GetOrderCourseByID(arg0 context.Context, arg1 int32) (*db.OrderCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderCourseByID", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderCourseByID indicates an expected call of GetOrderCourseByID.
func (mr *MockStoreMockRecorder) GetOrderCourseByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderCourseByID", reflect.TypeOf((*MockStore)(nil).GetOrderCourseByID), arg0, arg1)
}

// GetOrderCoursesDetailByID mocks base method.
func (m *MockStore) GetOrderCoursesDetailByID(arg0 context.Context, arg1 int32) (*db.OrderCoursesDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderCoursesDetailByID", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderCoursesDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderCoursesDetailByID indicates an expected call of GetOrderCoursesDetailByID.
func (mr *MockStoreMockRecorder) GetOrderCoursesDetailByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderCoursesDetailByID", reflect.TypeOf((*MockStore)(nil).GetOrderCoursesDetailByID), arg0, arg1)
}

// Signin mocks base method.
func (m *MockStore) Signin(arg0 context.Context, arg1 models.CreateUserReq) (*models.UserResponse, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signin", arg0, arg1)
	ret0, _ := ret[0].(*models.UserResponse)
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// Signin indicates an expected call of Signin.
func (mr *MockStoreMockRecorder) Signin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signin", reflect.TypeOf((*MockStore)(nil).Signin), arg0, arg1)
}

// Signout mocks base method.
func (m *MockStore) Signout(arg0 context.Context, arg1 string) *models.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signout", arg0, arg1)
	ret0, _ := ret[0].(*models.Error)
	return ret0
}

// Signout indicates an expected call of Signout.
func (mr *MockStoreMockRecorder) Signout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signout", reflect.TypeOf((*MockStore)(nil).Signout), arg0, arg1)
}

// Signup mocks base method.
func (m *MockStore) Signup(arg0 context.Context, arg1 models.CreateUserReq) (*models.UserResponse, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", arg0, arg1)
	ret0, _ := ret[0].(*models.UserResponse)
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockStoreMockRecorder) Signup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockStore)(nil).Signup), arg0, arg1)
}

// UpdateCart mocks base method.
func (m *MockStore) UpdateCart(arg0 context.Context, arg1 db.UpdateCartParams) (*db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCart", arg0, arg1)
	ret0, _ := ret[0].(*db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCart indicates an expected call of UpdateCart.
func (mr *MockStoreMockRecorder) UpdateCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockStore)(nil).UpdateCart), arg0, arg1)
}

// UpdateCategory mocks base method.
func (m *MockStore) UpdateCategory(arg0 context.Context, arg1 db.UpdateCategoryParams) (*db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(*db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStoreMockRecorder) UpdateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStore)(nil).UpdateCategory), arg0, arg1)
}

// UpdateCourse mocks base method.
func (m *MockStore) UpdateCourse(arg0 context.Context, arg1 db.UpdateCourseParams) (*db.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourse", arg0, arg1)
	ret0, _ := ret[0].(*db.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourse indicates an expected call of UpdateCourse.
func (mr *MockStoreMockRecorder) UpdateCourse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourse", reflect.TypeOf((*MockStore)(nil).UpdateCourse), arg0, arg1)
}

// UpdateCourseImage mocks base method.
func (m *MockStore) UpdateCourseImage(arg0 context.Context, arg1 db.UpdateCourseImageParams) (*db.CoursesImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseImage", arg0, arg1)
	ret0, _ := ret[0].(*db.CoursesImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourseImage indicates an expected call of UpdateCourseImage.
func (mr *MockStoreMockRecorder) UpdateCourseImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseImage", reflect.TypeOf((*MockStore)(nil).UpdateCourseImage), arg0, arg1)
}

// UpdateOrderCourse mocks base method.
func (m *MockStore) UpdateOrderCourse(arg0 context.Context, arg1 db.UpdateOrderCourseParams) (*db.OrderCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderCourse", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderCourse indicates an expected call of UpdateOrderCourse.
func (mr *MockStoreMockRecorder) UpdateOrderCourse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderCourse", reflect.TypeOf((*MockStore)(nil).UpdateOrderCourse), arg0, arg1)
}

// UpdateOrderCoursesDetail mocks base method.
func (m *MockStore) UpdateOrderCoursesDetail(arg0 context.Context, arg1 db.UpdateOrderCoursesDetailParams) (*db.OrderCoursesDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderCoursesDetail", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderCoursesDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderCoursesDetail indicates an expected call of UpdateOrderCoursesDetail.
func (mr *MockStoreMockRecorder) UpdateOrderCoursesDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderCoursesDetail", reflect.TypeOf((*MockStore)(nil).UpdateOrderCoursesDetail), arg0, arg1)
}

// UpdateToken mocks base method.
func (m *MockStore) UpdateToken(arg0 context.Context, arg1 db.UpdateTokenParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", arg0, arg1)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockStoreMockRecorder) UpdateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockStore)(nil).UpdateToken), arg0, arg1)
}

// UpdateUserName mocks base method.
func (m *MockStore) UpdateUserName(arg0 context.Context, arg1 db.UpdateUserNameParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserName", arg0, arg1)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserName indicates an expected call of UpdateUserName.
func (mr *MockStoreMockRecorder) UpdateUserName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserName", reflect.TypeOf((*MockStore)(nil).UpdateUserName), arg0, arg1)
}

// UpdateUserPhone mocks base method.
func (m *MockStore) UpdateUserPhone(arg0 context.Context, arg1 db.UpdateUserPhoneParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPhone", arg0, arg1)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPhone indicates an expected call of UpdateUserPhone.
func (mr *MockStoreMockRecorder) UpdateUserPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhone", reflect.TypeOf((*MockStore)(nil).UpdateUserPhone), arg0, arg1)
}
