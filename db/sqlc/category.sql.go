// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: category.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (cate_name)
VALUES ($1)
RETURNING cate_id, cate_name
`

func (q *Queries) CreateCategory(ctx context.Context, cateName *string) (*Category, error) {
	row := q.db.QueryRow(ctx, createCategory, cateName)
	var i Category
	err := row.Scan(&i.CateID, &i.CateName)
	return &i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM category WHERE cate_id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, cateID int32) error {
	_, err := q.db.Exec(ctx, deleteCategory, cateID)
	return err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT cate_id, cate_name FROM category
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]*Category, error) {
	rows, err := q.db.Query(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.CateID, &i.CateName); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT cate_id, cate_name FROM category WHERE cate_id = $1
`

func (q *Queries) GetCategoryByID(ctx context.Context, cateID int32) (*Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, cateID)
	var i Category
	err := row.Scan(&i.CateID, &i.CateName)
	return &i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category
SET cate_name = $2
WHERE cate_id = $1
RETURNING cate_id, cate_name
`

type UpdateCategoryParams struct {
	CateID   int32   `json:"cate_id"`
	CateName *string `json:"cate_name"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (*Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.CateID, arg.CateName)
	var i Category
	err := row.Scan(&i.CateID, &i.CateName)
	return &i, err
}
