// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: courses.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (cours_name, cours_desc, cours_author, cours_price, cours_modified, cours_cate_id)
VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP, $5)
RETURNING cours_id, cours_name, cours_desc, cours_author, cours_price, cours_modified, cours_cate_id
`

type CreateCourseParams struct {
	CoursName   *string        `json:"cours_name"`
	CoursDesc   *string        `json:"cours_desc"`
	CoursAuthor *string        `json:"cours_author"`
	CoursPrice  *float32 `json:"cours_price"`
	CoursCateID *int32         `json:"cours_cate_id"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (*Course, error) {
	row := q.db.QueryRow(ctx, createCourse,
		arg.CoursName,
		arg.CoursDesc,
		arg.CoursAuthor,
		arg.CoursPrice,
		arg.CoursCateID,
	)
	var i Course
	err := row.Scan(
		&i.CoursID,
		&i.CoursName,
		&i.CoursDesc,
		&i.CoursAuthor,
		&i.CoursPrice,
		&i.CoursModified,
		&i.CoursCateID,
	)
	return &i, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM courses WHERE cours_id = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, coursID int32) error {
	_, err := q.db.Exec(ctx, deleteCourse, coursID)
	return err
}

const getAllCourses = `-- name: GetAllCourses :many
SELECT cours_id, cours_name, cours_desc, cours_author, cours_price, cours_modified, cours_cate_id FROM courses
`

func (q *Queries) GetAllCourses(ctx context.Context) ([]*Course, error) {
	rows, err := q.db.Query(ctx, getAllCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.CoursID,
			&i.CoursName,
			&i.CoursDesc,
			&i.CoursAuthor,
			&i.CoursPrice,
			&i.CoursModified,
			&i.CoursCateID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCoursesPaging = `-- name: GetAllCoursesPaging :many
SELECT cours_name, cours_desc, cours_author, cours_price, cours_modified, cours_cate_id
FROM courses
ORDER BY cours_id
LIMIT $1 OFFSET $2
`

type GetAllCoursesPagingParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllCoursesPagingRow struct {
	CoursName     *string          `json:"cours_name"`
	CoursDesc     *string          `json:"cours_desc"`
	CoursAuthor   *string          `json:"cours_author"`
	CoursPrice    *float32   `json:"cours_price"`
	CoursModified pgtype.Timestamp `json:"cours_modified"`
	CoursCateID   *int32           `json:"cours_cate_id"`
}

func (q *Queries) GetAllCoursesPaging(ctx context.Context, arg GetAllCoursesPagingParams) ([]*GetAllCoursesPagingRow, error) {
	rows, err := q.db.Query(ctx, getAllCoursesPaging, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllCoursesPagingRow
	for rows.Next() {
		var i GetAllCoursesPagingRow
		if err := rows.Scan(
			&i.CoursName,
			&i.CoursDesc,
			&i.CoursAuthor,
			&i.CoursPrice,
			&i.CoursModified,
			&i.CoursCateID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseByID = `-- name: GetCourseByID :one
SELECT cours_id, cours_name, cours_desc, cours_author, cours_price, cours_modified, cours_cate_id FROM courses WHERE cours_id = $1
`

func (q *Queries) GetCourseByID(ctx context.Context, coursID int32) (*Course, error) {
	row := q.db.QueryRow(ctx, getCourseByID, coursID)
	var i Course
	err := row.Scan(
		&i.CoursID,
		&i.CoursName,
		&i.CoursDesc,
		&i.CoursAuthor,
		&i.CoursPrice,
		&i.CoursModified,
		&i.CoursCateID,
	)
	return &i, err
}

const updateCourse = `-- name: UpdateCourse :one
UPDATE courses
SET cours_name = $2, cours_desc = $3, cours_author = $4, cours_price = $5, cours_modified = CURRENT_TIMESTAMP, cours_cate_id = $6
WHERE cours_id = $1
RETURNING cours_id, cours_name, cours_desc, cours_author, cours_price, cours_modified, cours_cate_id
`

type UpdateCourseParams struct {
	CoursID     int32          `json:"cours_id"`
	CoursName   *string        `json:"cours_name"`
	CoursDesc   *string        `json:"cours_desc"`
	CoursAuthor *string        `json:"cours_author"`
	CoursPrice  *float32 `json:"cours_price"`
	CoursCateID *int32         `json:"cours_cate_id"`
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) (*Course, error) {
	row := q.db.QueryRow(ctx, updateCourse,
		arg.CoursID,
		arg.CoursName,
		arg.CoursDesc,
		arg.CoursAuthor,
		arg.CoursPrice,
		arg.CoursCateID,
	)
	var i Course
	err := row.Scan(
		&i.CoursID,
		&i.CoursName,
		&i.CoursDesc,
		&i.CoursAuthor,
		&i.CoursPrice,
		&i.CoursModified,
		&i.CoursCateID,
	)
	return &i, err
}
