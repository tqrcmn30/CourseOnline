// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: coursesimages.sql

package db

import (
	"context"
)

const createCourseImage = `-- name: CreateCourseImage :one
INSERT INTO courses_images (coim_filename, coim_default, coim_reme_id)
VALUES ($1, $2, $3)
RETURNING coim_id, coim_filename, coim_default, coim_reme_id
`

type CreateCourseImageParams struct {
	CoimFilename *string `json:"coim_filename"`
	CoimDefault  *string `json:"coim_default"`
	CoimRemeID   *int32  `json:"coim_reme_id"`
}

func (q *Queries) CreateCourseImage(ctx context.Context, arg CreateCourseImageParams) (*CoursesImage, error) {
	row := q.db.QueryRow(ctx, createCourseImage, arg.CoimFilename, arg.CoimDefault, arg.CoimRemeID)
	var i CoursesImage
	err := row.Scan(
		&i.CoimID,
		&i.CoimFilename,
		&i.CoimDefault,
		&i.CoimRemeID,
	)
	return &i, err
}

const deleteCourseImage = `-- name: DeleteCourseImage :exec
DELETE FROM courses_images WHERE coim_id = $1
`

func (q *Queries) DeleteCourseImage(ctx context.Context, coimID int32) error {
	_, err := q.db.Exec(ctx, deleteCourseImage, coimID)
	return err
}

const getAllCourseImages = `-- name: GetAllCourseImages :many
SELECT coim_id, coim_filename, coim_default, coim_reme_id FROM courses_images
`

func (q *Queries) GetAllCourseImages(ctx context.Context) ([]*CoursesImage, error) {
	rows, err := q.db.Query(ctx, getAllCourseImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*CoursesImage
	for rows.Next() {
		var i CoursesImage
		if err := rows.Scan(
			&i.CoimID,
			&i.CoimFilename,
			&i.CoimDefault,
			&i.CoimRemeID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseImageByID = `-- name: GetCourseImageByID :one
SELECT coim_id, coim_filename, coim_default, coim_reme_id FROM courses_images WHERE coim_id = $1
`

func (q *Queries) GetCourseImageByID(ctx context.Context, coimID int32) (*CoursesImage, error) {
	row := q.db.QueryRow(ctx, getCourseImageByID, coimID)
	var i CoursesImage
	err := row.Scan(
		&i.CoimID,
		&i.CoimFilename,
		&i.CoimDefault,
		&i.CoimRemeID,
	)
	return &i, err
}

const updateCourseImage = `-- name: UpdateCourseImage :one
UPDATE courses_images
SET coim_filename = $2, coim_default = $3, coim_reme_id = $4
WHERE coim_id = $1
RETURNING coim_id, coim_filename, coim_default, coim_reme_id
`

type UpdateCourseImageParams struct {
	CoimID       int32   `json:"coim_id"`
	CoimFilename *string `json:"coim_filename"`
	CoimDefault  *string `json:"coim_default"`
	CoimRemeID   *int32  `json:"coim_reme_id"`
}

func (q *Queries) UpdateCourseImage(ctx context.Context, arg UpdateCourseImageParams) (*CoursesImage, error) {
	row := q.db.QueryRow(ctx, updateCourseImage,
		arg.CoimID,
		arg.CoimFilename,
		arg.CoimDefault,
		arg.CoimRemeID,
	)
	var i CoursesImage
	err := row.Scan(
		&i.CoimID,
		&i.CoimFilename,
		&i.CoimDefault,
		&i.CoimRemeID,
	)
	return &i, err
}
