// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_name, user_password, user_email, user_phone, user_token)
VALUES ($1, $2, $3, $4, $5)
RETURNING user_id, user_name, user_password, user_email, user_phone, user_token
`

type CreateUserParams struct {
	UserName     *string `json:"user_name"`
	UserPassword *string `json:"user_password"`
	UserEmail    *string `json:"user_email"`
	UserPhone    *string `json:"user_phone"`
	UserToken    *string `json:"user_token"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserName,
		arg.UserPassword,
		arg.UserEmail,
		arg.UserPhone,
		arg.UserToken,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserPassword,
		&i.UserEmail,
		&i.UserPhone,
		&i.UserToken,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, user_name, user_password, user_email, user_phone, user_token FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.UserPassword,
			&i.UserEmail,
			&i.UserPhone,
			&i.UserToken,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, user_name, user_password, user_email, user_phone, user_token FROM users WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID int32) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserPassword,
		&i.UserEmail,
		&i.UserPhone,
		&i.UserToken,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET user_name = $2, user_password = $3, user_email = $4, user_phone = $5, user_token = $6
WHERE user_id = $1
RETURNING user_id, user_name, user_password, user_email, user_phone, user_token
`

type UpdateUserParams struct {
	UserID       int32   `json:"user_id"`
	UserName     *string `json:"user_name"`
	UserPassword *string `json:"user_password"`
	UserEmail    *string `json:"user_email"`
	UserPhone    *string `json:"user_phone"`
	UserToken    *string `json:"user_token"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UserID,
		arg.UserName,
		arg.UserPassword,
		arg.UserEmail,
		arg.UserPhone,
		arg.UserToken,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserPassword,
		&i.UserEmail,
		&i.UserPhone,
		&i.UserToken,
	)
	return &i, err
}
