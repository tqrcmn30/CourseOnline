// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: ordercoursedetail.sql

package db

import (
	"context"

)

const createOrderCoursesDetail = `-- name: CreateOrderCoursesDetail :one
INSERT INTO order_courses_detail (ucde_qty, ucde_price, ucde_total_price, ucde_usco_id, ucde_cours_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING ucde_id, ucde_qty, ucde_price, ucde_total_price, ucde_usco_id, ucde_cours_id
`

type CreateOrderCoursesDetailParams struct {
	UcdeQty        *int32         `json:"ucde_qty"`
	UcdePrice      *float32 `json:"ucde_price"`
	UcdeTotalPrice *float32 `json:"ucde_total_price"`
	UcdeUscoID     *int32         `json:"ucde_usco_id"`
	UcdeCoursID    *int32         `json:"ucde_cours_id"`
}

func (q *Queries) CreateOrderCoursesDetail(ctx context.Context, arg CreateOrderCoursesDetailParams) (*OrderCoursesDetail, error) {
	row := q.db.QueryRow(ctx, createOrderCoursesDetail,
		arg.UcdeQty,
		arg.UcdePrice,
		arg.UcdeTotalPrice,
		arg.UcdeUscoID,
		arg.UcdeCoursID,
	)
	var i OrderCoursesDetail
	err := row.Scan(
		&i.UcdeID,
		&i.UcdeQty,
		&i.UcdePrice,
		&i.UcdeTotalPrice,
		&i.UcdeUscoID,
		&i.UcdeCoursID,
	)
	return &i, err
}

const deleteOrderCoursesDetail = `-- name: DeleteOrderCoursesDetail :exec
DELETE FROM order_courses_detail WHERE ucde_id = $1
`

func (q *Queries) DeleteOrderCoursesDetail(ctx context.Context, ucdeID int32) error {
	_, err := q.db.Exec(ctx, deleteOrderCoursesDetail, ucdeID)
	return err
}

const getAllOrderCoursesDetails = `-- name: GetAllOrderCoursesDetails :many
SELECT ucde_id, ucde_qty, ucde_price, ucde_total_price, ucde_usco_id, ucde_cours_id FROM order_courses_detail
`

func (q *Queries) GetAllOrderCoursesDetails(ctx context.Context) ([]*OrderCoursesDetail, error) {
	rows, err := q.db.Query(ctx, getAllOrderCoursesDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*OrderCoursesDetail
	for rows.Next() {
		var i OrderCoursesDetail
		if err := rows.Scan(
			&i.UcdeID,
			&i.UcdeQty,
			&i.UcdePrice,
			&i.UcdeTotalPrice,
			&i.UcdeUscoID,
			&i.UcdeCoursID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderCoursesDetailByID = `-- name: GetOrderCoursesDetailByID :one
SELECT ucde_id, ucde_qty, ucde_price, ucde_total_price, ucde_usco_id, ucde_cours_id FROM order_courses_detail WHERE ucde_id = $1
`

func (q *Queries) GetOrderCoursesDetailByID(ctx context.Context, ucdeID int32) (*OrderCoursesDetail, error) {
	row := q.db.QueryRow(ctx, getOrderCoursesDetailByID, ucdeID)
	var i OrderCoursesDetail
	err := row.Scan(
		&i.UcdeID,
		&i.UcdeQty,
		&i.UcdePrice,
		&i.UcdeTotalPrice,
		&i.UcdeUscoID,
		&i.UcdeCoursID,
	)
	return &i, err
}

const updateOrderCoursesDetail = `-- name: UpdateOrderCoursesDetail :one
UPDATE order_courses_detail
SET ucde_qty = $2, ucde_price = $3, ucde_total_price = $4, ucde_usco_id = $5, ucde_cours_id = $6
WHERE ucde_id = $1
RETURNING ucde_id, ucde_qty, ucde_price, ucde_total_price, ucde_usco_id, ucde_cours_id
`

type UpdateOrderCoursesDetailParams struct {
	UcdeID         int32          `json:"ucde_id"`
	UcdeQty        *int32         `json:"ucde_qty"`
	UcdePrice      *float32 `json:"ucde_price"`
	UcdeTotalPrice *float32 `json:"ucde_total_price"`
	UcdeUscoID     *int32         `json:"ucde_usco_id"`
	UcdeCoursID    *int32         `json:"ucde_cours_id"`
}

func (q *Queries) UpdateOrderCoursesDetail(ctx context.Context, arg UpdateOrderCoursesDetailParams) (*OrderCoursesDetail, error) {
	row := q.db.QueryRow(ctx, updateOrderCoursesDetail,
		arg.UcdeID,
		arg.UcdeQty,
		arg.UcdePrice,
		arg.UcdeTotalPrice,
		arg.UcdeUscoID,
		arg.UcdeCoursID,
	)
	var i OrderCoursesDetail
	err := row.Scan(
		&i.UcdeID,
		&i.UcdeQty,
		&i.UcdePrice,
		&i.UcdeTotalPrice,
		&i.UcdeUscoID,
		&i.UcdeCoursID,
	)
	return &i, err
}
