// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: ordercourses.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrderCourse = `-- name: CreateOrderCourse :one
INSERT INTO order_courses (usco_purchase_no, usco_tax, usco_subtotal, usco_patrx_no, usco_modified, usco_user_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING usco_id, usco_purchase_no, usco_tax, usco_subtotal, usco_patrx_no, usco_modified, usco_user_id
`

type CreateOrderCourseParams struct {
	UscoPurchaseNo *string          `json:"usco_purchase_no"`
	UscoTax        pgtype.Numeric   `json:"usco_tax"`
	UscoSubtotal   pgtype.Numeric   `json:"usco_subtotal"`
	UscoPatrxNo    *string          `json:"usco_patrx_no"`
	UscoModified   pgtype.Timestamp `json:"usco_modified"`
	UscoUserID     *int32           `json:"usco_user_id"`
}

func (q *Queries) CreateOrderCourse(ctx context.Context, arg CreateOrderCourseParams) (*OrderCourse, error) {
	row := q.db.QueryRow(ctx, createOrderCourse,
		arg.UscoPurchaseNo,
		arg.UscoTax,
		arg.UscoSubtotal,
		arg.UscoPatrxNo,
		arg.UscoModified,
		arg.UscoUserID,
	)
	var i OrderCourse
	err := row.Scan(
		&i.UscoID,
		&i.UscoPurchaseNo,
		&i.UscoTax,
		&i.UscoSubtotal,
		&i.UscoPatrxNo,
		&i.UscoModified,
		&i.UscoUserID,
	)
	return &i, err
}

const deleteOrderCourse = `-- name: DeleteOrderCourse :exec
DELETE FROM order_courses WHERE usco_id = $1
`

func (q *Queries) DeleteOrderCourse(ctx context.Context, uscoID int32) error {
	_, err := q.db.Exec(ctx, deleteOrderCourse, uscoID)
	return err
}

const getAllOrderCourses = `-- name: GetAllOrderCourses :many
SELECT usco_id, usco_purchase_no, usco_tax, usco_subtotal, usco_patrx_no, usco_modified, usco_user_id FROM order_courses
`

func (q *Queries) GetAllOrderCourses(ctx context.Context) ([]*OrderCourse, error) {
	rows, err := q.db.Query(ctx, getAllOrderCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*OrderCourse
	for rows.Next() {
		var i OrderCourse
		if err := rows.Scan(
			&i.UscoID,
			&i.UscoPurchaseNo,
			&i.UscoTax,
			&i.UscoSubtotal,
			&i.UscoPatrxNo,
			&i.UscoModified,
			&i.UscoUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderCourseByID = `-- name: GetOrderCourseByID :one
SELECT usco_id, usco_purchase_no, usco_tax, usco_subtotal, usco_patrx_no, usco_modified, usco_user_id FROM order_courses WHERE usco_id = $1
`

func (q *Queries) GetOrderCourseByID(ctx context.Context, uscoID int32) (*OrderCourse, error) {
	row := q.db.QueryRow(ctx, getOrderCourseByID, uscoID)
	var i OrderCourse
	err := row.Scan(
		&i.UscoID,
		&i.UscoPurchaseNo,
		&i.UscoTax,
		&i.UscoSubtotal,
		&i.UscoPatrxNo,
		&i.UscoModified,
		&i.UscoUserID,
	)
	return &i, err
}

const updateOrderCourse = `-- name: UpdateOrderCourse :one
UPDATE order_courses
SET usco_purchase_no = $2, usco_tax = $3, usco_subtotal = $4, usco_patrx_no = $5, usco_modified = $6, usco_user_id = $7
WHERE usco_id = $1
RETURNING usco_id, usco_purchase_no, usco_tax, usco_subtotal, usco_patrx_no, usco_modified, usco_user_id
`

type UpdateOrderCourseParams struct {
	UscoID         int32            `json:"usco_id"`
	UscoPurchaseNo *string          `json:"usco_purchase_no"`
	UscoTax        pgtype.Numeric   `json:"usco_tax"`
	UscoSubtotal   pgtype.Numeric   `json:"usco_subtotal"`
	UscoPatrxNo    *string          `json:"usco_patrx_no"`
	UscoModified   pgtype.Timestamp `json:"usco_modified"`
	UscoUserID     *int32           `json:"usco_user_id"`
}

func (q *Queries) UpdateOrderCourse(ctx context.Context, arg UpdateOrderCourseParams) (*OrderCourse, error) {
	row := q.db.QueryRow(ctx, updateOrderCourse,
		arg.UscoID,
		arg.UscoPurchaseNo,
		arg.UscoTax,
		arg.UscoSubtotal,
		arg.UscoPatrxNo,
		arg.UscoModified,
		arg.UscoUserID,
	)
	var i OrderCourse
	err := row.Scan(
		&i.UscoID,
		&i.UscoPurchaseNo,
		&i.UscoTax,
		&i.UscoSubtotal,
		&i.UscoPatrxNo,
		&i.UscoModified,
		&i.UscoUserID,
	)
	return &i, err
}
